% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/checkboxTable.R
\name{checkboxTable}
\alias{checkboxTable}
\title{Generate a Table with a Checkbox Column}
\usage{
checkboxTable(tbl, inputId, label = "", value = FALSE, table_label = "",
  checkbox_column = 1, pixie = . \%>\% identity(), display_table = FALSE)
}
\arguments{
\item{tbl}{An object that inherits \code{data.frame}}

\item{inputId}{A string of length 1, as would be passed to the argument
of the same name in \code{checkboxInput}.}

\item{label}{A character vector of labels to appear next to the check boxes.
Most often, in a tabular display, this function can be served by another
table in the column and \code{label} can be left blank.}

\item{value}{A logical vector setting the initial status of the check box.  This must
have length 1 or equal to \code{nrow(tbl)}.}

\item{table_label}{A character string to be displayed above the table.}

\item{checkbox_column}{The column position at which the check boxes should
be placed.}

\item{pixie}{A chain of \code{sprinkle} for customizing the appearance of the
table.  The chain must start with \code{.} and may take any number of
commands connected by the \code{\%>\%} operator.}

\item{display_table}{Logical.  Defaults to \code{FALSE}, which converts the
  the table into a character string suitable for \code{renderText}. When
  \code{TRUE}, it prints the table to a viewing pane in order to assist the
  user in formatting the table without having to view it in the shiny application.}
}
\description{
The checkbox table allows for display of tabular information
  with the option to select multiple items for further analysis.  The difference
  between \code{checkboxTable} and \code{checkboxGroupTable} is how the inputs
  are stored--the controls in a \code{checkboxTable} all have independent control
  names and are stored as logical.  The controls in a \code{checkboxGroupTable}
  act as a group and the inputs are stored as a character vector.
}
\examples{
checkboxTable(tbl = mtcars,
              inputId = paste0("carChoice", 1:nrow(mtcars)),
              label = rownames(mtcars),
              value = FALSE,
              table_label = "Select Vehicles",
              display_table=TRUE,
              pixie = . \%>\% sprinkle(bg_pattern_by = "rows"))

\dontrun{
library(shiny)
library(pixiedust)
library(shinydust)

server <- shinyServer(function(input, output) {
  output$table <-
    renderText({
      cbind(rownames(mtcars), mtcars) \%>\%
        checkboxTable(inputId = paste0("chooseCar", 1:nrow(mtcars)),
                   label = "",
                   value = FALSE,
                   table_label = "Select a Vehicle",
                   pixie = . \%>\%
                   sprinkle(bg_pattern_by = "rows") \%>\%
                   sprinkle_table(pad = 7) \%>\%
                   sprinkle_colnames("rownames(mtcars)" = "",
                                     control = ""))
   })

output$chooseCar1 <- renderText(paste0("Mazda RX4: ", input$chooseCar1))
output$chooseCar2 <- renderText(paste0("Mazda RX4 Wag: ", input$chooseCar2))
})

ui <- shinyUI(fluidPage(
  wellPanel(
    verbatimTextOutput("chooseCar1"),
    verbatimTextOutput("chooseCar2"),
    uiOutput("table")
  )
))

shinyApp(ui = ui, server = server)
}
}
\author{
Benjamin Nutter
}
\seealso{
\code{\link[pixiedust]{dust}}, \code{\link[pixiedust]{sprinkle}},
  \code{\link[shiny]{checkboxGroupInput}}

  \code{\link{radioTable}}
}

